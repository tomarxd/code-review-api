// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  githubId  String   @unique
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  repositories Repository[]
  analyses     Analysis[]

  @@map("users")
}

model Repository {
  id        String   @id @default(cuid())
  name      String
  fullName  String   @unique
  userId    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses Analysis[]

  @@map("repositories")
}

model Analysis {
  id           String        @id @default(cuid())
  repositoryId String
  userId       String
  prNumber     Int
  commitSha    String
  status       AnalysisStatus @default(PENDING)
  totalLines   Int?
  createdAt    DateTime      @default(now())
  completedAt  DateTime?

  repository  Repository   @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestions Suggestion[]

  @@unique([repositoryId, prNumber])
  @@index([userId, createdAt])
  @@map("analyses")
}

model Suggestion {
  id          String   @id @default(cuid())
  analysisId  String
  filePath    String
  lineNumber  Int
  severity    Severity
  category    String
  message     String
  suggestion  String
  codeSnippet String?

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([analysisId])
  @@map("suggestions")
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum Severity {
  HIGH
  MEDIUM
  LOW
}